{
	"info": {
		"_postman_id": "388626cd-2db5-4a24-9969-8ca80db41598",
		"name": "User Registration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Registration",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"password\": \"password\",\n\t\"username\": \"username\",\n\t\"email\": \"email@example.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://my-aws-api.com/register",
					"protocol": "https",
					"host": [
						"my-aws-api",
						"com"
					],
					"path": [
						"register"
					]
				},
				"description": "This request is used to register a new user in the application.\n\n**What this request does:**\n\n1.  Accepts a JSON object in the request body with the fields `username`, `password`, and `email`.\n2.  Verifies that all three fields are present in the request.\n3.  Checks if a user with the provided `username` already exists in the database (DynamoDB).\n4.  If a user with that username is not found, it hashes the provided `password` using `bcryptjs`.\n5.  Saves the new user to the DynamoDB table (`USERS_TABLE`) with the provided `username`, the hashed password (`passwordHash`), `email`, and registration date (`registrationDate`).\n6.  Returns a successful response with a `201 Created` status code and the message \"User registered successfully.\", along with the registered `username` and `email`.\n\n**Possible responses:**\n\n* **201 Created:** Successful user registration.\n    ```json\n    {\n        \"message\": \"User registered successfully.\",\n        \"username\": \"your_desired_username\",\n        \"email\": \"your_email@example.com\"\n    }\n    ```\n* **400 Bad Request:** Error in the request. This can happen if:\n    * The request body is empty.\n    * One of the required fields (`username`, `password`, or `email`) is missing.\n    * The request body is not valid JSON.\n    * A validation error occurred while interacting with DynamoDB.\n    ```json\n    {\n        \"message\": \"Request body cannot be empty.\"\n    }\n    ```\n    ```json\n    {\n        \"message\": \"Username is required.\"\n    }\n    ```\n    ```json\n    {\n        \"message\": \"Invalid JSON in request body.\"\n    }\n    ```\n    ```json\n    {\n        \"message\": \"Validation error with DynamoDB.\"\n    }\n    ```\n* **409 Conflict:** A user with the provided `username` already exists.\n    ```json\n    {\n        \"message\": \"User with this username already exists.\"\n    }\n    ```\n* **500 Internal Server Error:** An unexpected error occurred on the server. Error details may be included in the `error` field.\n    ```json\n    {\n        \"message\": \"Internal server error - [error details]\",\n        \"error\": \"[error details]\"\n    }\n    ```\n\n"
			},
			"response": []
		}
	]
}
